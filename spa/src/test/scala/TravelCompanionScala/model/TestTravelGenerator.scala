package TravelCompanionScala.model

/**
 * Created by IntelliJ IDEA.
 * User: pmei
 * Date: 04.06.2010
 * Time: 11:25:09
 * Package: TravelCompanionScala.model
 * Class: TestTravelGenerator
 */

import org.junit.Test
import org.junit.Before
import org.junit.After
import javax.persistence.{Persistence, EntityManagerFactory}
import java.util.{Date, ArrayList}

class TestTravelGenerator {
  var emf: EntityManagerFactory = _

  @Before
  def initEMF() = {
    try {
      emf = Persistence.createEntityManagerFactory("jpaweb")
    } catch {
      case e: Exception => {
        def printAndDescend(ex: Throwable): Unit = {
          println(e.getMessage())
          if (ex.getCause() != null) {
            printAndDescend(ex.getCause())
          }
        }
        printAndDescend(e)
      }
    }
  }

  @After
  def closeEMF() = {
    if (emf != null) emf.close()
  }

  @Test
  def generate() = {
    var em = emf.createEntityManager()
    val tx = em.getTransaction()

    tx.begin()

    //All the must fields must have a value, otherwise the data is inconsistent on load
    //See JSR 303 Annotations in Entity Class Member
    val member = new Member
    member.name = "pmei"
    member.email= "pmei@lol.com"
    member.password= "pmei"
    em.persist(member)

    //we can do this because
    //- the object member is already attached to JPA (= has a PK)
    //- all the changes are written to the database at the commit() statement
    member.name = member.name + member.id
    em.merge(member)

    //Generate tours with one Stage each
    for (i <- 0 until 100) {
      var tour = new Tour
      tour.name = "Name: Generated Travel "+i
      tour.description = "Description "+i+": This awesome travel is generated by a generator"
      tour.owner = member
      em.persist(tour)

      var location: Location = createDummyLocation
      em.persist(location)

      var stages = new ArrayList[Stage]()
      var stage = new Stage
      stage.startdate = new Date;
      stage.description = "startbeschreibung"
      stage.name = "Start"
      stage.tour = tour
      stage.destination = location
      em.persist(stage)

      stages.add(stage)
      tour.stages = stages;
      em.merge(tour)
    }

    tx.commit()
    em.close()
  }

  private def createDummyLocation: Location = {
    var location = new Location
    location.countrycode = "CH"
    location.adminname = "Bern"
    location.name = "Berne"
    location.countryname = "Switzerland"
    location.admincode = "BE"
    location.lng = "7.44744300842285"
    location.geonameid = "2657896"
    location.lat = "46.9480943365053"
    location.population = "121631"
    location
  }
}